// 上下文无关文法 EBNF
《文件》： 《包声明》 《导入声明》 《声明》
        | 《包声明》 《链接声明》 《声明》
《包声明》： package保留词 标识符 \n 
《导入声明》： import保留词 《导入声明尾》
	《导入声明尾》：《导入描述行》
				| "(" \n 《导入描述组》 ")" \n  //别名可选，行任意重复
	《导入描述组》：《导入描述行》 《导入描述组》
				|  \n 《导入描述组》
				|  ε
	《导入描述行》：标识符:别名 字符串:路径 \n
				| 字符串:路径 \n

《赋值号》： ":="
《标识符列表》： 标识符  (《分隔符》 标识符)* 
《常量表达式列表》: 《常量表达式》 《常量表达式列表尾》
	《常量表达式列表尾》： (","|"、") 《常量表达式列表尾》
						| ε
《表达式列表》： 《表达式》 《表达式列表尾》
	《表达式列表尾》： (","|"、") 《表达式列表尾》
					| ε
	《语句分隔符》： "\n" | ";"
	《行内分隔符》:  "," | "、"

《访问修饰声明》：《声明》
		|"+" 《声明》
		|"-" 《声明》
		| 空 \n
《声明》： 《类型声明》
		| 《常量声明》
		| 《变量声明》
		| 《过程声明》
		| 《类声明》
		| 《函数声明》
		| 《算符声明》
《常量声明》： const保留词 《常量声明尾》
	《常量声明尾》：《常量描述行》
				| "("  \n  《常量描述组》  ")"  \n
	《常量描述组》： 《常量描述行》 《常量描述组》
				|  \n 《常量描述组》
				|  ε
	《常量描述行》： 《标识符列表》 《类型描述》? 赋值号 《常量表达式列表》 \n
		《标识符列表》： 标识符 《标识符列表尾》
		《标识符列表尾》： (","|"、")  标识符  《标识符列表尾》
						| ε
《变量声明》： var保留词 《变量声明尾》
	《变量声明尾》：《变量描述行》
				| "("  \n  《变量描述组》  ")"  \n
	《变量描述组》： 《变量描述行》 《变量描述组》
				|  \n 《变量描述组》
				|  ε
	《变量描述行》： 《标识符列表》 《类型描述》? 赋值号 《表达式列表》 (";"|"\n")

《类型声明》：type保留词 《类型声明尾》
	《类型声明尾》： 《类型描述行》
				|  "("  \n  《类型描述组》  ")"  \n    //多行批量声明
	《类型描述组》： 《类型描述行》《类型描述组》
				| \n 《类型描述组》
				| ε
	《类型描述行》： 标识符:类型名  《类型描述》  \n
	《类型描述》： 《基本类型名》
				|《构造类型描述》
	《基本类型名》：逻辑型 | 数据型
				| 自然型 | 自然型8 | 自然型16 | 自然型32 | 自然型64
				| 整型 | 整型8 | 整型16 | 整型32 | 整型64
				| 浮点 | 浮点32 | 浮点64 
				| 字符 | 字符8 | 字符16 | 字符32 | ascii字符
	《构造类型描述》： 《地址类型描述》
					|《数组类型描述》
					|《结构体描述》
					|《共用体描述》
					|《枚举体描述》
		《地址类型描述》： "->" 《类型描述》
		《数组类型描述》： "["  《常量表达式》:容量  "]"  《类型描述》
		《结构体描述》： struct保留词  "{" \n 《字段组》  "}"  \n
		《共用体描述》： union保留词   "{" \n 《字段组》  "}"  \n
			《字段组》： 《访问修饰字段行》 《字段组》
						| \n 《字段组》
						| ε
			《访问修饰字段行》： 《字段行》
						| "+" 《字段行》
						| "-" 《字段行》
			《字段行》： 标识符:字段名  《类型描述》 \n
		《枚举体描述》： enum保留词 "{" \n 《枚举成员组》 "}" "\n"
			《枚举成员组》： 《枚举成员项》 (","|"、"|"\n") 《枚举成员组》
							| \n 《枚举成员组》
							| ε
			《枚举成员项》： 标识符:成员名 (赋值号 常数:枚举值)? 

《函数声明》：func保留词 标识符 "(" 《参数列表》 ")"   ("(" 《参数列表》 ")")  《语句块》
《过程声明》：proc保留词 标识符 "(" 《参数列表》? ")"  ("(" 《参数列表》 ")")? 《语句块》 
	《参数列表》： 标识符:命名? 《类型描述》  《参数列表尾》
		《参数列表尾》：(","|"、") 标识符:命名? 《类型描述》 《参数列表尾》
					| ε    //FOLLOW随符集：右圆括号
《方法声明》：mthd保留词 "(" 标识符  《类型描述》 ")" 标识符 "(" 《参数列表》? ")" 《返回值列表》? 《语句块》

《语句块》：  《裸语句块》 \n
《裸语句块》："{" \n 《语句组》 "}"
《语句组》： 《语句行》 《语句组》
			| \n 《语句组》
			| ε
《语句行》： 《语句》 ("\n"| ";")
《语句》：《声明》     //FIRST首符集：macro、type、const、var、标识符、常数、goto、break、continue
		|《简单语句》  //            if、while、loop、for、defer、return
//		|《标签语句》
//		|《goto语句》
		|《break语句》
		|《continue语句》
		|《branch语句》
		|《if语句》
		|《while语句》
		|《loop语句》
		|《for语句》
		|《defer语句》
		|《return语句》
		|《语句块》

《简单语句》： 《赋值语句》 //
			| 《表达式语句》  //过程、方法 调用之类
《赋值语句》：《表达式列表》 《赋值号》 《表达式列表》
《表达式语句》：《表达式》
// 《标签语句》：      标识符 ":"  《语句》? // 暂不实现
// 《goto语句》：      goto保留词  标识符
《break语句》：     break保留词  标识符?
《continue语句》：  continue保留词  标识符?
《defer语句》：     defer保留词  《表达式》
《return语句》：    return保留词  《表达式列表》?

// 单行if 块if
《if语句》： if保留词 "(" 《表达式》 ")" 《if语句尾》
	《if语句尾》：《语句行》              //单行if
				|《裸语句块》  (else保留词 (《if语句》|《裸语句块》))?  \n

《while语句》：while保留词 "(" 《表达式》 ")" 语句块

《for语句》：for保留词 《for语句尾》
	《for语句尾》："(" 《for初始化语句》? ";" 《表达式》? ";" 《赋值语句》? ")" 《语句块》
				| 《裸语句块》 until保留词 "(" 《表达式》 ")" \n
				| 《裸语句块》 \n
	《for初始化语句》： var保留词 《标识符列表》 《类型描述》? 赋值号 《表达式列表》


命名规则
  尾     ： 由 保留词 开头的句子，为了提取 公共左因子 而除去“引导保留词”剩下的部分

  列表   : 行内结构, 至少有1个元素, 前后无边缘界符.
  裸列表  : 前后 无边缘界符 的列表, 默认状态下就是裸列表
  有界列表: 行内，带边缘界符划分独立域的列表

  项     ：用于表示 键-值 对型的单项描述，但不包括项之间的分隔符
  组     ：通常指需要多行表示的连续的 多个行 或 多个项，且其中可能有空行

  行     ：以换行 '\n' 结尾的任意句子
  语句   ：句子，但是没有末尾的结束界符
  语句行 : 末尾有结束界符的句子，例如 '\n' 或 ';' 两种界符
  语句组 ： 以换行符 '\n' 或分号 ';' 作为中间界符分隔的一组句子，但前后无边缘界符分隔
  语句块 ：由 边缘界符 分离的语句组

<program>	->	<dec><program>|^
<dec>		->	<type>ident<dectail>|semicon|rsv_extern<type>ident semicon
<type>		->	rsv_void|rsv_int|rsv_char
<dectail>	->	semicon|<varlist>semicon|lparen<para>rparen<funtail>
<funtail>	->	<block>|semicon
<varlist>	->	comma ident<varlist>|^
<para>		->	<type>ident<paralist>|^
<paralist>	->	comma<type>ident<paralist>|^

<block>		->	lbrac<childprogram>rbrac
<childprogram>	->	<localdec><childprogram>|<statements><childprogram>|^
<localdec>	->	<type>ident<lcoaldectail>semicon
<localvartail>	->	comma ident<localvartail>|^

<statement>	->	ident<idtail>semicon|<whilestat>|<ifstat>|<retstat>|semicon
			|rsv_break semicon|rsv_continue semicon
			|rsv_in input<ident>semicon|rsv_out output<expr>semicon
<whilestat>	->	rsv_while lparen<expr>rparen<block>
<ifstat>	->	rsv_if lparen<expr>rparen<block>rsv_else<block>
<retstat>	->	rsv_return<returntail>semicon
<returntail>	->	<expr>|^
<idtail>	->	assign<exp>|lparen<realarg>rparen
<realarg>	->	<expr><arglist>|^
<arglist>	->	comma<expr><arglist>|^

<expr>		->	<aloexp><exptail>
<exptail>	->	<cmps><expr>|^
<cmps>		->	gt|ge|ls|le|equ|nequ
<aloexp>	->	<item><itemtail>
<itemtail>	->	<adds><aloexp>|^
<adds>		->	add|sub
<item>		->	<factor><factortail>
<factortail>	->	<muls><item>|^
<factor>	->	ident<idtail>|number|chara|lparen<expr>rparen|string
<muls>		->	mul|div
