// 上下文无关文法 EBNF
《文件》： 《包声明行》 "\n"* 《导入声明》  "\n"* 《声明区》 "\n"* 文件结束
《包声明行》： package 标识符
《导入声明》： import 《导入描述行》
					| "(" (《导入描述》? \n|;)* ")"  //别名可选，行任意重复
	《导入描述》：标识符:别名 字符串:路径 
				| 字符串:路径

《赋值号》： ":="
《标识符列表》： 标识符  (《分隔符》 标识符)*
《常量表达式列表》: 《常量表达式》 《常量表达式列表尾》
	《常量表达式列表尾》： (","|"、") 《常量表达式列表尾》
						| ε

《访问修饰声明》：(+|-)? 《声明》
《声明》： 《类型声明》
		| 《常量声明》
		| 《变量声明》
		| 《过程声明》
		| 《函数声明》
		| 《算符声明》
		| 《类声明》

《标识符列表》： 标识符 (,|、 标识符)*
《常量声明》：(+|-)? const 《常量描述》
				|"(" (《常量描述》? \n|;)* ")"
	《常量描述》： 《标识符列表》 《类型描述》? 赋值号 《常数表达式列表》 \n

《变量声明》：(+|-)? var 《变量描述》
						|"(" (《变量描述》? \n|;)* ")"
	《变量描述》:《标识符列表》 (《类型描述》 (赋值号 《表达式列表》)? | 赋值号《表达式列表》)

《类型声明》：type 《类型描述》
						| "("  (《类型描述》? \n|;)*  ")"    //多行批量声明
	《类型描述》：标识符:类型名 《类型》
	《类型》：逻辑型 | 数据型  //bool data 
				| 自然型 | 自然型8 | 自然型16 | 自然型32 | 自然型64 // uint uint8 uint16 uint32 uint64 
				| 整型 | 整型8 | 整型16 | 整型32 | 整型64 // int int8 int16 int32 int64
				| 浮点 | 浮点32 | 浮点64                 // float float32 float64
				| 字符 | 字符8 | 字符16 | 字符32 | ascii字符 //char char8 char16 char32 ascii
				| 《指针类型》 | 《数组类型》 
				| 《结构体》 | 《共用体》 | 《枚举体》
		《指针类型》： "->" 《类型》
		《数组类型》： "[" 《数组长度》 "]" 《类型》
			《数组长度》：《常数表达式》
		《结构体》： struct  "{" (《访问修饰字段》? ,|\n)* "}"
		《共用体》： union   "{" (《访问修饰字段》? ,|\n)* "}"
			《访问修饰字段》： 《字段》
						| "+" 《字段》
						| "-" 《字段》
			《字段》： 标识符:字段名  《类型描述》
		《枚举体》： enum "{" (《枚举成员项》? ,|\n)* "}"
			《枚举成员项》： 标识符:成员名 (赋值号 常数:枚举值)?

《函数声明》：func保留词 标识符 "(" 《参数列表》 ")"   ("(" 《参数列表》 ")")  《语句块》
《过程声明》：proc保留词 标识符 "(" 《参数声明列表》? ")"  ("(" 《参数列表》 ")")? 《语句块》 
	《参数声明列表》： 标识符:命名? 《类型描述》  ( ","|"、" 标识符:命名? 《类型描述》)*
《方法声明》：mthd保留词 "(" 标识符  《类型描述》 ")" 标识符 "(" 《参数列表》? ")" 《返回值列表》? 《语句块》

《语句块》："{" (《语句》?  \n|;)* "}"
《语句》：《声明》  //FIRST首符集：macro、type、const、var、标识符、label、goto、break、continue
		|《表达式》    //        if、while、loop、for、defer、return
		|《label语句》
		|《goto语句》
		|《break语句》  // 中止
		|《continue语句》
		|《defer语句》
		|《return语句》
		|《if语句》     // 条件分支
		|《match语句》
		|《branch语句》
			|《模式语句》： "|" 《表达式列表》 ":"
		|《循环语句》
		|《while语句》  // 循环
		|《for语句》
		|《语句块》

《label语句》：   "label"    标识符 ":"
《goto语句》：    "goto"     标识符
《break语句》：   "break"    标识符?
《continue语句》："continue" 标识符?
《defer语句》：   "defer"  《表达式》
《return语句》：  return保留词  《表达式列表》?

// 分支
《if语句》：if 《表达式》 《语句块》 (else 《语句块》|《if语句》)?
《match语句》：match 《表达式》 《语句块》
《branch语句》：branch 标识符? {  }

//循环
《循环语句》：《原始循环》 = 循环 《原始循环三元控制块》 《语句块》  //《原始循环》
			|循环 《语句块》 (直到 《表达式》)?        //《直到循环》 《死循环》
	《原始循环三元控制块》：《初始化语句》? ;|\n 《逻辑值表达式》? ;|\n 《后处理表达式》

《while语句》："while" 《表达式》 《语句块》
《for语句》：for 《原始循环三元控制块》 《语句块》


《表达式列表》：《表达式》 ( ,|、 《表达式》)*

《表达式》:= 《赋值表达式》 | 《条件表达式》
《赋值表达式》:= 《二元表达式》
            | 《一元表达式》《赋值运算符》 《条件表达式》|《二元表达式》 //难以通过首符集区分，合并为如下
《赋值表达式》:= 《二元表达式》 ( 《赋值运算符》 (《条件表达式》|《二元表达式》) )?  //未来准备支持多返回值
	《赋值运算符》: := 、+= -= *= ×= /= ÷= %= 、<<= >>= &= ∧= |= ∨= ^= ⊕=
《条件表达式》:= if 《二元表达式》 then 《表达式》 (else 《条件表达式》|《二元表达式》)?  //如果 则 否则
《二元表达式》:= 《一元表达式》 (《二元运算符》 《一元表达式》)*
	《二元运算符》:= + - * × / ÷ %   = != ≠ < <= ≤ > >= ≥   << >> & ∧ | ∨ ^ ⊕

《一元表达式》:=  《前缀运算符》 《一元表达式》       //首符集：前缀运算符、sizeof、标识符、字面量、(
				| "sizeof" "(" (《类型描述》|《一元表达式》) ")"
				| 《后缀表达式》
	《前缀运算符》:= & + - ~ ! ￢ ¬

《后缀表达式》:= 《基本表达式》 《后缀运算符》*
	《后缀运算符》:=   "."|"·" 标识符
					| "(" (《表达式》 ((","|"、") 《表达式》)* )? ")"
					| "[" 《表达式》 "]"
					| "as" "(" 《类型描述》 ")"    //强制类型转换
					| "as" 《类型描述》
					| "->"|"→"                        //裸解引用，而不是间接成员访问 "->" 标识符
					| 的尺寸
					| 的类型
					| "++"
					| "--"
《基本表达式》:=   标识符
				| 逻辑值字面量
				| 整数字面量
				| 浮点数字面量
				| 字符字面量
				| 字符串字面量
				| "(" 《表达式》 ")"

命名规则
  尾     ： 由 保留词 开头的句子，为了提取 公共左因子 而除去“引导保留词”剩下的部分

  列表   : 行内结构, 至少有1个元素, 前后无边缘界符.
  裸列表  : 前后 无边缘界符 的列表, 默认状态下就是裸列表
  有界列表: 行内，带边缘界符划分独立域的列表

  项     ：用于表示 键-值 对型的单项描述，但不包括项之间的分隔符
  组     ：通常指需要多行表示的连续的 多个行 或 多个项，且其中可能有空行

  行     ：以换行 '\n' 结尾的任意句子
  语句   ：句子，但是没有末尾的结束界符
  语句行 : 末尾有结束界符的语句，例如 '\n' 或 ';' 两种界符
  语句组 ： 以换行符 '\n' 或分号 ';' 作为中间界符分隔的一组句子，但前后无边缘界符分隔
  语句块 ：由 边缘界符 在左右标识的语句组
